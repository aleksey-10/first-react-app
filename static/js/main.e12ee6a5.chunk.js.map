{"version":3,"sources":["todo/context.jsx","todo/InputData.jsx","todo/ToDoItem.jsx","todo/ToDoList.jsx","todo/DropDown.jsx","todo/ToDoForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","InputData","props","type","className","onKeyDown","event","key","submitInput","target","value","onBlur","autoFocus","ToDoItem","todo","useContext","deleteTodo","completeTodo","onChangeValue","liClasses","completed","push","useState","inputText","setInputText","inputNumber","setInputNumber","submitValue","id","trim","join","onChange","checked","onClick","text","ToDoList","todos","map","index","DropDown","clear","getSum","aria-labelledby","ToDoForm","setText","number","setNumber","onSubmit","preventDefault","createItem","placeholder","required","data-toggle","aria-haspopup","aria-expanded","App","JSON","parse","localStorage","getItem","setTodos","resetId","toDos","i","length","setItem","stringify","Provider","filter","element","alert","reduce","sum","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e12ee6a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React from 'react';\r\n\r\nexport default function InputData( props ) {\r\n\treturn (\r\n\t\t<input \r\n\t\t\ttype={props.type}\r\n\t\t\tclassName=\"form-control\"\r\n\t\t\t\r\n\t\t\tonKeyDown = {\r\n\t\t\t\tevent => {\r\n\t\t\t\t\tif (event.key === 'Enter') {\r\n\t\t\t\t\t\tprops.submitInput(props.type, event.target.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tonBlur = {\r\n\t\t\t\tevent => {\r\n\t\t\t\t\tprops.submitInput(props.type, event.target.value)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tautoFocus \r\n\t\t/> \r\n\t)\r\n}","import React from 'react';\r\nimport Context from './context.jsx';\r\nimport InputData from './InputData.jsx';\r\n\r\nexport default function ToDoItem( { todo } ) {\r\n\r\n\tconst { deleteTodo, completeTodo, onChangeValue  } = React.useContext(Context);\r\n\t\r\n\tlet liClasses = ['list-group-item'];\r\n\r\n\tif ( todo.completed ) liClasses.push( 'completed' );\r\n\t\r\n\tlet [inputText, setInputText] = React.useState(false); \r\n\tlet [inputNumber, setInputNumber] = React.useState(false);\r\n\r\n\tlet submitValue = (type, value) => {\r\n\t\tsetInputText(false);\r\n\t\tsetInputNumber(false);\r\n\t\t\r\n\t\tif (type === 'number' ) return onChangeValue(todo.id, 'value', value);\r\n\t\tif ( value.trim() )\treturn onChangeValue(todo.id, type, value);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li className={ liClasses.join(' ') }>\r\n\t\t\t<div className=\"row justify-content-around align-items-center\">\r\n\t\t\t\t<input \r\n\t\t\t\ttype=\"checkbox\" className=\"item-element check col-1\" \r\n\t\t\t\tonChange={() => completeTodo(todo.id)} \r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tchecked={todo.completed}\t\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div className=\"item-element text col\" onClick={ () => setInputText(true) } > \r\n\t\t\t\t\t{ inputText ? <InputData submitInput={submitValue} type={'text'} /> : todo.text\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"item-element value col-3\" onClick={ () => setInputNumber(true) } > \r\n\t\t\t\t\t{\tinputNumber ? <InputData submitInput={submitValue} type={'number'} /> : todo.value\t} \r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"item-element del col-1\" onClick={ () => deleteTodo(todo.id) }> &times; </div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</li>\r\n\t)\r\n}","import React from 'react';\r\nimport ToDoItem from './ToDoItem.jsx';\r\n\r\nexport default function ToDoList ( { todos } ) {\r\n\r\n\treturn (\r\n\t\t<ul className=\"list-group\">\r\n\t\t\t{\r\n\t\t\t\ttodos.map( (todo, index) => {\r\n\t\t\t\t\treturn <ToDoItem todo={todo} key={index+1} />\r\n\t\t\t\t} )\r\n\t\t\t}\r\n\t\t</ul>\r\n\t);\r\n}","import React from 'react';\r\nimport Context from './context.jsx';\r\n\r\nexport default function DropDown() {\r\n    const { clear, getSum } = React.useContext(Context);\r\n\r\n    return (\r\n\r\n        <div className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenu2\">\r\n            <button className=\"dropdown-item\" type=\"button\" onClick={ getSum }>SUM</button>\r\n            <button className=\"dropdown-item\" type=\"button\" onClick={ clear }>Clear</button>\r\n            <button className=\"dropdown-item\" type=\"button\">UP</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport DropDown from './DropDown';\r\n\r\n\r\nexport default function ToDoForm(props) {\r\n\r\n\tlet [text, setText] = React.useState('');\r\n\tlet [number, setNumber] = React.useState(0);\r\n\r\n\tfunction onsubmit(event) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tprops.createItem(text, number);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className=\"form row justify-content-around sticky-top\" onSubmit={onsubmit}>\r\n\t\t\t<input type=\"text\" onChange={event => setText(event.target.value)} className=\"form-control col-7 col-md-5\" placeholder=\"Product\" required />\r\n\t\t\t<input type=\"number\" onChange={event => setNumber(event.target.value)} className=\"form-control col-4 col-md-2\" placeholder=\"Value\" />\r\n\t\t\t<input type=\"submit\" className=\"form-control col-7 col-md-2 btn btn-info\" value=\"Submit\" />\r\n\r\n\t\t\t<input className=\"form-control col-4 col-md-2 btn btn-secondary dropdown-toggle\" value=\"More\" type=\"button\" id=\"dropdownMenu2\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" />\r\n\t\t\t<DropDown />\r\n\r\n\t\t</form>\r\n\t)\r\n}","import React from 'react';\nimport './todo/style.css';\nimport ToDoList from './todo/ToDoList.jsx';\nimport ToDoForm from './todo/ToDoForm.jsx';\nimport Context from './todo/context.jsx'\n\nfunction App() {\n\n  const [todos, setTodos] = React.useState(JSON.parse(localStorage.getItem('todos')));\n\n  localStorage.setItem('todos', JSON.stringify(todos));\n\n  function pushItem(text, value) {\n    setTodos(todos.concat([{\n      text,\n      value,\n      completed: false,\n      id: todos.length + 1\n    }])\n    )\n  }\n\n  function resetId(toDos) {\n\n    setTodos(toDos.map(todo => {\n\n      for (let i = 0; i < toDos.length; i++) {\n        if (todo === toDos[i]) todo.id = i + 1;\n      }\n\n      return todo;\n    })\n    )\n  }\n\n  function deleteTodo(id) {\n    let toDoS = todos.filter(todo => id !== todo.id);\n\n    resetId(toDoS);\n  }\n\n  function completeTodo(id) {\n    setTodos(todos.map(todo => {\n      if (id === todo.id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    }));\n\n    resetId(todos);\n  }\n  \n  function onChangeValue(id, element, value) {\n    setTodos(todos.map(todo => {\n\n      if (id === todo.id) todo[element] = value;\n\n      return todo;\n    }))\n  }\n\n  function clear() {\n    setTodos([]);\n  }\n\n  function getSum() {\n    alert( todos.reduce( (sum, todo) => sum + +todo.value, 0  ) ); \n  }\n\n\n  return (\n    <Context.Provider value={{ deleteTodo, completeTodo, onChangeValue, clear, getSum }}>\n      <nav className=\"navbar navbar-dark bg-warning\">\n        <span className=\"navbar-brand mb-0 h1 mx-auto\">REACT TO-DO</span>\n      </nav>\n      <div className=\"container todo\">\n        <ToDoForm createItem={pushItem} />\n        <ToDoList todos={todos} />\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}